#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('cloudmin9:server');
const http = require('http');

/**
* Create HTTP server
*/

const server = http.createServer(app);

const io = require('socket.io')(server);

let activeSocketsCount = 0;
let activeUsers = [];

io.on('connection', async (socket) => {
  activeSocketsCount++;
  console.log('User connected. Active sockets:', activeSocketsCount);

      // Handle disconnection
      socket.on('disconnect', () => {
        activeSocketsCount--;
        announceDeparture(activeSocketsCount, socket.userObject)
      });

      async function announceDeparture(activeSocketsCount, userObject) {
        console.log('User disconnected. Active sockets:', activeSocketsCount);
        if (userObject) {
            const index = activeUsers.indexOf(userObject.username);
            if (index !== -1) {
                activeUsers.splice(index, 1); // Remove the user from activeUsers array
            }
            console.log('Active users:', activeUsers);
            io.emit('broadcast', { message: `${userObject.username} has left the room`, activeSockets: activeSocketsCount, activeUsers });
        }
      }

      // Event listener for user/client data sent by dashboard load
      socket.on('userClient', (data) => {
        
        // log the user's client data on connection
        console.log('userClient:', data);
        const userObject = data.userData.user;
        socket.userObject = userObject;
        activeUsers.push(userObject.username);
        console.log('Active users:', activeUsers);
        io.emit('broadcast', { message: `${userObject.username} has joined the room`, activeSockets: activeSocketsCount, activeUsers  } );
      });

      socket.on('error', (error) => {
        console.error('Socket error:', error);
      });


      socket.on('chatRoom', (threadId) => {
        socket.join(threadId); // Join the room corresponding to the thread ID
        
        socket.on('sendMessage', (message) => {
          // Emit the message only to the room corresponding to the thread ID
          io.to(threadId).emit('newMessage', message);
          
          // You can also save the message to your database here
          // Example: saveMessageToDatabase(message);
        });
      });
      
});
  
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


module.exports = { io };
